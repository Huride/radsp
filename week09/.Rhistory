?round
install.packages('MASS')
library(MASS)
dataset <- Boston
View(dataset)
max <- apply(dataset, 2, max)
maxs <- apply(dataset, 2, max)
mins <- apply(dataset, 2, min)
maxs
mins
sacaled.data <- scale(dataset, center=mins,
scale = maxs - mins)
View(sacaled.data)
View(dataset)
View(sacaled.data)
scaled.data <- scale(dataset, center=mins,
scale = maxs - mins)
summary(scaled.data)
library(caTools)
install.packages('caTools')
library(caTools)
set.seed(123)
split <- sample.split(scaled.data$medv, SplitRatio = 0.7)
scaled.data <- as.data.frame(scaled.data)
split <- sample.split(scaled.data$medv, SplitRatio = 0.7)
training_set <- subset(scaled.data, split == T)
test_set <- subset(scaled.data, split == F)
install.packages('neuralnet')
library(neuralnet)
n <- colnames(training_set)
f <- as.formula(paste('medv ~ ',
paste(n[!n %in% 'medv'],
collapse = '+')))
f
nn <- neuralnet(f,
data = training_set,
hidden = c( 10, 7, 5),
linear.output = TRUE)
nn
plot(nn)
View(dataset)
View(sacaled.data)
View(dataset)
View(dataset)
setwd("~/")
setwd("~/GitHub/radsp/week09")
predict.nn.values <- compute(nn, test_set[ , 1:13])
str(predict.nn.values)
predict.nn.values$net.result
true.predictions <- predict.nn.values$net.result *
(max(dataset$medv) - min(dataset$medv)) +
min(dataset$medv)
true.predictions
# 테스트셋의 medv 도 실제 값으로 작업.
test.real <- test_set$medv *
(max(dataset$medv) - min(dataset$medv)) +
min(dataset$medv)
test.real
MSE.nn <-  sum( (test.real - true.predictions)^2 ) / nrow(test_set)
MSE.nn
true.predictions <- as.vector(true.predictions)
result <- cbind(test.real, y_pred = true.predictions)
View(result)
library(ggplot2)
install.packages('ggplot2')
library(ggplot2)
error.df <- data.frame(result)
colnames(error.df)
ggplot(error.df, aes(x=test.real, y=true.predictions)) + geom_point()
sum(is.na(dataset))
dataset <- read.csv('bank_note_data.csv')
sum(is.na(dataset))
View(dataset)
str(dataset)
levels(as.factor(dataset$Class))
View(dataset)
library(caTools)
set.seed(123)
split <- sample.split(dataset$Class , SplitRatio = 0.7)
training_set <- subset(dataset, split == T)
test_set <- subset(dataset, split == F)
library(neuralnet)
colnames(training_set)
nn <- neuralnet(formula = Class ~ Image.Var + Image.Skew +
Image.Curt + Entropy,
data = training_set,
hidden = c(10,20,10),
linear.output = FALSE)
plot(nn)
y_pred <- compute(nn, test_set[ , -5])
y_pred
y_pred.ret <- y_pred$net.result
y_pred.ret
summary(dataset)
y_pred.class <- sapply(y_pred.ret, round)
y_pred.class
cm = table(test_set$Class, y_pred.class)
cm
install.packages('randomForest')
library(randomForest)
set.seed(123)
split <- sample.split(dataset$Class, SplitRatio = 0.7)
training_set <- subset(dataset, split == T)
test_set <- subset(dataset, split == F)
classifier <- randomForest(formula = Class ~ Image.Var + Image.Skew +
Image.Curt + Entropy,
data = training_set)
rf.pred <- predict(classifier, newdata = test_set[ , -5])
rf.pred
?randomForest
fr.pred.class <- sapply(rf.pred, round)
fr.pred.class
cm.rf <- table(test_set$Class, fr.pred.class)
cm.rf
2 / sum(cm)
(227+183) / sum(cm)
