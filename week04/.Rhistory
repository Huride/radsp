x <- 0
while(x < 10){
paste("x is : ", x)
x <- x + 1
}
while(x < 10){
print('hello')
x <- x + 1
}
while(x < 10){
print('hello')
x <- x + 1
}
while(x < 10){
print('hello')
x <- x + 1
}
x <- 0
while(x < 10){
print('hello')
x <- x + 1
}
x <- 0
x <- 0
while(x < 10){
print(paste('x is : ', x))
x <- x + 1
}
x <- 0
while(x < 10){
paste('x is : ', x)
x <- x + 1
}
x <- 0
while(x < 10){
print(paste('x is : ', x))
x <- x + 1
}
x <- 0
while(x < 10){
print(paste('x is : ', x))
x <- x + 1
}
x <- 0
while(x < 10){
print(paste('x is : ', x))
x <- x + 1
}
x <- 0
while(x < 10){
print(paste('x is : ', x))
}
while(x < 10){
if(x == 3){
print("Bye")
break
}
print(paste('x is : ', x))
x <- x + 1
}
vec <- 1:5
vec
for(data in vec){
print(data + 10)
}
mat <- matrix(1:25, nrow = 5)
mat
for( num in mat){
print(num + 10)
}
for( i in 2:9 ){
for ( j in 1:9 ){
print(paste(i, 'X', j , '=', i*j))
}
}
readline(prompt = "단을 입력하세요. : ")
step <- readline(prompt = "단을 입력하세요. : ")
step * 1
step <- as.numeric(step)
for(i in 1:9){
print( paste(step, "X", i, "=", step*i)  )
}
for(i in 1:9){
print('hello')
print( paste(step, "X", i, "=", step*i)  )
}
for(i in 1:9){
print('hello') print( paste(step, "X", i, "=", step*i)  )
}
for(i in 1:9){
print( paste(step, "X", i, "=", step*i)  )
}
step <- readline(prompt = "단을 입력하세요. : ")
step <- as.numeric(step)
for(i in 1:9){
print( paste(step, "X", i, "=", step*i)  )
}
x <- 1
while(x < 11){
print(x)
}
while(x < 11){
print(x)
x <- x + 1
}
x <- 1
while(x < 11){
print(x)
x <- x + 1
}
x <- 1
setwd("~/GitHub/radsp/week04")
while(x < 11){
print( paste('hello :', x) )
if(x == 3){
print('bye')
}
x <- x + 1
}
while(x < 11){
print( paste('hello :', x) )
if(x == 3){
print('bye')
}
x <- x + 1
}
while(x < 11){
print( paste('hello :', x) )
if(x == 3){
print('bye')
}
x <- x + 1
}
while(x < 11){
print( paste('hello :', x) )
if(x == 3){
print('bye')
}
x <- x + 1
}
x <- 1
while(x < 11){
print( paste('hello :', x) )
if(x == 3){
print('bye')
}
x <- x + 1
}
### break 문
x <- 1
while(x < 11){
print( paste('hello :', x) )
if(x == 3){
print('bye')
break
}
x <- x + 1
}
### break 문
x <- 1
while(x < 11){
print( paste('hello :', x) )
if(x == 3){
print('bye')
break
print('good')
}
x <- x + 1
}
vec <- 5:10
for( data in vec){
print(paste('hello :', data))
}
for( data in vec){
print(paste('hello :', data))
}
vec <- 5:100000
for( data in vec){
print(paste('hello :', data))
}
mat <- matrix(1:25, nrow = 5)
mat <- matrix(1:25, nrow = 5)
mat
for( item in mat){
print('hi')
print(item)
}
setwd("~/GitHub/radsp/week04")
for( step in 2:9){
for( i in 1:9 ){
print( paste(step, 'X', i, '=', step*i ) )
}
}
'--------------'
for( step in 2:9){   # c(2,3,4,5,6,7,8,9)
for( i in 1:9 ){   # c(1,2,3,4,5,6,7,8,9)
print( paste(step, 'X', i, '=', step*i ) )
}
print('------------')
}
readline(prompt = '단을 입력하세요 : ')
step <- readline(prompt = '단을 입력하세요 : ')
step * 3
step * 1
step * 1
step * 39
step <- as.numeric(step)
step * 4
for( i in 1:9){
print( paste(step, 'X', i, '=', step*i ))
}
num <- readline(prompt = "숫자 입력 : ")
num <- readline(prompt = "숫자 입력 : ")
for(i in 1:5){
num <- readline(prompt = "숫자 입력 : ")
}
for(i in 1:10){  # c(1,2,3,4,5)
num <- readline(prompt = "숫자 입력 : ")
}
minus.count <- 0
for(i in 1:5){  # c(1,2,3,4,5)
num <- readline(prompt = "숫자 입력 : ")
num <- as.numeric(num)
if(num < 0){
minus.count <-  minus.count + 1
}
}
minus.count
vec <- c()
for( i in 1:5){
num <- readline(prompt = '숫자 입력 : ')
num <- as.numeric(num)
vec <- append(vec, num)
}
rev(vec)
v <- 4:23
sum(v)
mean(v)
length(v)
my.sum <- 0
for( data in v ){
my.sum <- my.sum + data
}
my.sum
# 함수의 정의
hello <- function(){
print('hello')
}
hello()
hello()
hello()
hello.you <- function(name){
print(paste('hello', name))
}
hello()
sum(1:5)
hello.you('Mike')
hello.you('홍길동')
# 2 parameters
cal.nums <- function(num1, num2){
ret <- (num1 + num2) * 7
print(ret)
}
cal.nums(3,4)
order.num <- function(num1, num2, num3){
print(paste(num1, num2, num3))
print('bye')
}
order.num(1,2,3)
order.num(num2 = 1, num3 = 2, num1 = 3)
hello.someone <- function(name){
print(paste('hello', name))
}
hello.someone <- function(name){
print(paste('hello', name))
}
hello.someone('홍길동')
hello.someone()
cal.nums(5)
hello.someone <- function(name = 'Mike'){
print(paste('hello', name))
}
hello.someone('홍길동')
hello.someone()
readline()
readline(prompt = '숫자 입력 ')
readline(prompt = '')
x <- 1
minus.count <- 0
minus.count <- 0
formal <- function(name = 'Sam', title = 'Sir'){
print(paste(title, name))
}
formal()
formal('Harry')
formal(title='Mr')
formal('홍길동', '선생님')
formal <- function(name = 'Sam', title){
print(paste(title, name))
}
formal('Harry')
formal('Harry')
formal('Harry', 'Mr')
formal(title = "선생님")
times5 <- function(number){
ret <- times5 ^ 5
}
times5 <- function(number){
ret <- number ^ 5
}
times5 <- function(number){
ret <- number ^ 5
}
times5(2)
times5(2)
times5 <- function(number){
ret <- number ^ 5
print(ret)
}
times5(2)
result <- times5(2)
times5.new <- function(number){
ret <- number ^ 5
ret
}
result <- times5.new(2)
result <- times5.new(2)
times5.new <- function(number){
ret <- number ^ 5
ret
}
result <- times5.new(2)
times5.return <- function(number){
ret <- number ^ 5
return(ret)
}
result <- times5.return(2)
hello.name <- function(name){
print(paste('Hello', name))
}
hello.name('홍길동')
# 3: 두 수를 입력하면, 두수의 곱을 반환하는 함수.
mul <- function(num1, num2){
ret <- num1 * num2
return(ret)
}
mul(3, 5)
# 호출 예) num_check(4,c(1,2,3))
num_check <- function(number, vec){
for( data in vec){
if(data == number){
return(TRUE)
}
}
return(FALSE)
}
# 호출 예) num_check(4,c(1,2,3))
num_check <- function(number, vec){
for( data in vec){
if(data == number){
return(TRUE)
}
}
return(FALSE)
}
num_check(5, 7:20)
num_check(12, 7:20)
num_check(3, 7:20)
num_count <- function(number, vec){
cnt <- 0
for(data in vec){
if(data == number){
cnt <- cnt + 1
}
}
return(cnt)
}
num_count(3, c(1,1,2,3,3,3,3,5,5,100,22,22,22,22,22))
num_count(100, c(1,1,2,3,3,3,3,5,5,100,22,22,22,22,22))
num_count(0, c(1,1,2,3,3,3,3,5,5,100,22,22,22,22,22))
num_count(234, c(1,1,2,3,3,3,3,5,5,100,22,22,22,22,22))
num_count <- function(number, vec){
for(data in vec){
if(data == number){
cnt <- cnt + 1
}
}
return(cnt)
}
num_count(234, c(1,1,2,3,3,3,3,5,5,100,22,22,22,22,22))
# 3개의 변수를 전달받아서, 하나씩 3의 배수인지 확인하여,
# 3의 배수가 아니면, 변수하나 만들어서 합하여 저장한다.
summer <- function(num1, num2, num3){
my.sum <- 0
if(num1 %% 3 != 0){
my.sum <- my.sum + num1
}
if(num2 %% 3 != 0){
my.sum <- my.sum + num2
}
if(num3 %% 3 != 0){
my.sum <- my.sum + num3
}
print(my.sum)
}
# 예)
summer(7,2,3)
# 9
summer(3,6,9)
# 0
summer(9,11,12)
seq(10,30)
seq(20,40,2)
v <- c(1,4,6,7,2,13,2)
# 오름차순 정렬
sort(v)
# 내림차순 정렬
sort(v, decreasing = TRUE)
v2 <- c('hello', 'hi', 'Mike', 'Harry', 'Banana')
sort(v2)
sort(v2, decreasing = TRUE)
v3 <- c('바나나', '배','수박','사과')
sort(v3)
sort(v3, decreasing = TRUE)
v
append(v, 50)
append(v, 50)
v <- append(v, 50)
append(v , 100,200,300)
append(v , c(100,200,300) )
v <- append(v , c(100,200,300) )
v
rev(v)
reversed.v <- rev(v)
# 1차원 데이터
v
# 1차원 데이터
my.cal <- function(x){
x <- (x + 10) * 2
return(x)
}
my.cal(100)
my.cal(v)
my.cal(v)
# 두번째 방법
lappy(v, my.cal)
# 두번째 방법
lapply(v, my.cal)
sapply(v, my.cal)
v2 <- sapply(v, my.cal)  # s : simple 의 약자, 즉, 결과가 벡터
v2
email <- c('abc@gmail.com', 'bbb@naver.com', 'ccc@daum.net')
comments <- c("Hello. It's good", "good~",
'This product is very good')
reply <- data.frame(email, comments)
reply
reply
com.len <- sapply(reply$comments, nchar)
com.len <- sapply(reply$comments, nchar)
com.len
cbind(reply, com.len)
new.reply <-cbind(reply, com.len)
new.reply <- cbind(reply, com.len)
new.reply
rownames(new.reply) <- 1:3
new.reply
reply
nchar(reply$comments)
reply$com.len <- nchar(reply$comments)
reply
M <- matrix(1:20, nrow = 5)
M
apply(M, 1, mean)
apply(M, 2, mean)
apply(M, 1, sum)
apply(M, 2, sum)
