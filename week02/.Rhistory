age <- 30
word <- '고등어'
word2 <- "갈치"
3word <- "꽁치"
age + 30
word4 <- 'hello'
age + 30
score + 20
kor_score <- 50
eng_score <- 100
kor_score + 20
kor_score <- kor_score + 20
bank.account <- 1000000
bank account <- 1000000
bank.account <- 1000000
bank_account <- 1000000
deposit <- 10000
bank.account - deposit
bank.account <- bank.account - deposit
n <- 2.2
i <- 5
t <- TRUE
f <- FALSE
sentence <- 'Hello World!'
class(n)
class(i)
class(t)
class(f)
class(sentence)
is.numeric(n)
is.integer(n)
is.integer(i)
is.double(n)
is.double(i)
int <- 5L
is.double(int)
is.integer(int)
a <- 11
b <- 7
Area <- a * b
Area
Perimeter <- 2 * ( a + b)
Perimeter
a <- 22
x <- 11
x %% 2
x <- 12
x %% 2
x <- 12
x %% 2
x <- 12
x <- 12
x %% 2
a <- 20
area <- 6 * a ** 2
area
area <- 6 * a ^ 2
area
volume <- a ^ 3
volume
setwd("~/GitHub/radsp/week01")
a <- 3000
b <- '고등어'
c <- TRUE
word <- 'hello'
b <- '고등어'
c <- TRUE
word <- 'hello'
c(1,3,10,20)
v <- c(1,3,10,20)
v
v2 <- c("hello", "world", 'wecome to this','class')
v2 <- c("hello", "world", 'wecome to this','class')
v2
sum(v)
mean(v)
max(v)
min(v)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
# 부등식. 비교 연산자
# >  >=  < <=  == !=
v
# 부등식. 비교 연산자
# >  >=  < <=  == !=
v
# 데이터를 가져오시오. 억세스하라, 조회하라.
# 확인하라, 무엇이냐, 머가 저장되어있냐
# 저정되 있는 값은?
# ===>   []
v[2]
# 데이터를 가져오시오. 억세스하라, 조회하라.
# 확인하라, 무엇이냐, 머가 저장되어있냐
# 저정되 있는 값은?
# ===>   [몇번째 숫자]
v[1]
v[3]
tmp <- c(22, 18,23,26, 24)
tmps <- c(22, 18,23,26, 24)
tmps[1]
names(tmps) <- c('월', '화','수','목','금')
tmps
tmps['수']
tmps
# 화 부터 목 까지 => 화~목 => 화:목
tmps[2:4]
tmps['화':'목']
tmps['화':'목']
#화, 목요일 2개 데이터만 가져오시오.
tmps[2]
#화, 목요일 2개 데이터만 가져오시오.
tmps[4]
#화, 목요일 2개 데이터만 가져오시오.
tmps[ c(2,4) ]
tmps[ c('화','목')]
tmps[ c('화','목','금')]
# 24도 이상인 데이터만 가져오시.
tmps
tmps >= 24
filter <- tmps >= 24
tmps[ filter ]
1:10
seq(1,10)
seq(1,10, 2)
1:10:2
1:10
seq(1,10, 2)
v1 <- 1:5
v2 <- 10:16
v1
v2
v1 + v2
v1 <- 1:3
v2 <- 11:16
v1
v2
v1 + v2
v1
v2
#Data
# 2019년 1월 부터 12월까지의 수입과 지출 데이터 입니다.
revenue <- c(14574.49, 7606.46, 8611.41, 9175.41, 8058.65, 8105.44, 11496.28, 9766.09, 10305.32, 14379.96, 10713.97, 15433.50)
expenses <- c(12051.82, 5695.07, 12319.20, 12089.72, 8658.57, 840.20, 3285.73, 5821.12, 6976.93, 16618.61, 10054.37, 3803.96)
profit <-  revenue - expenses
profit
tax <- profit * 0.3
tax
tax <- round(tax, digits = 2)
tax
tax <- round(tax, digits = 1)
tax
tax <- round(tax, digits = 1)
tax
tax <- round(tax, digits = 2)
tax
# 이제 월별 세후 수익을 구하세요.
profit.after.tax <- profit - tax
profit.after.tax
# 각 월별, 비용대비 세후수익이 얼마인지 계산하세요.
# 퍼센트로 나오도록, 100을 곱하세요.
profit.margiin <-  profit.after.tax / revenue * 100
profit.margiin <- round(profit.margiin, 2)
profit.margiin
# 2019년도 세후 수익은 얼마인지 평균을 구하세요.
mean(profit.after.tax)
# 2019년도 세후 수익은 얼마인지 평균을 구하세요.
mean(profit.after.tax)
# 월별로, 평균수익 이상으로 수익을 낸 월을 찾으세요.
profit.after.tax
# 월별로, 평균수익 이상으로 수익을 낸 월을 찾으세요.
profit.after.tax >= mean(profit.after.tax)
# 2019년도 세후 수익은 얼마인지 평균을 구하세요.
avg <- mean(profit.after.tax)
# 월별로, 평균수익 이상으로 수익을 낸 월을 찾으세요.
profit.after.tax >= avg
# 월별로, 평균수익 이상으로 수익을 낸 월을 찾으세요.
names(profit.after.tax) <- 1:12
profit.after.tax
profit.after.tax >= avg
filter <- profit.after.tax >= avg
profit.after.tax[ filter  ]
# 반대로, 평균수익 이상 내지 못한 월들을 찾으세요.
filter2 <- profit.after.tax < avg
profit.after.tax[ filter2 ]
filter3 <- !filter
filter
filter
filter
filter3
filter
filter3
profit.after.tax[ filter3 ]
# 세후 수익이 가장 좋은 달은 몇월입니까?
max(profit.after.tax)
profit.after.tax
# 세후 수익이 가장 좋은 달은 몇월입니까?
max.profit <- max(profit.after.tax)  # 8140.64
profit.after.tax == max.profit
filter <- profit.after.tax == max.profit
profit.after.tax[ filter ]
min.profit <- min(profit.after.tax)
filter <- profit.after.tax == min.profit
profit.after.tax[ filter ]
setwd("~/GitHub/radsp/week02")
1:10
v <- 1:10
v
matrix(v)
matrix(v, nrow = 5 )
matrix(v, norw = 2)
matrix(v, nrow = 2)
matrix(v, nrow = 2, byrow = TRUE)
goog <- c(450, 451, 452, 445, 468)
msfg <- c(230, 231, 232, 236, 228)
goog
msfg
stocks <- c( goog, msfg )
stocks
matrix(stocks)
matrix(stocks, nrow = 2)
matrix(stocks, nrow = 2, byrow = TRUE)
stock.matrix <- matrix(stocks, nrow = 2, byrow = TRUE)
stock.matrix
rownames(stock.matrix) <- c('GOOG', 'MSFT')
stock.matrix
colnames(stock.matrix) <- c('Mon','Tue','Wed','Thu','Fri')
stock.matrix
mat <- matrix(1:50, nrow = 5, byrow = T)
mat
mat * 2
1/ mat
mat / 2
mat ^ 2
mat > 17
mat > 17
mat + mat
mat * mat
stock.matrix
sum(a)
sum(v)
v
v
sum(v)
stock.matrix
sum(stock.matrix)
rowSums(stock.matrix)
colSums(stock.matrix)
rowMeans(stock.matrix)
colMeans(stock.matrix)
stock.matrix
FB <- c(111, 112, 113, 120, 145)
rbind(stock.matrix, FB)
sto
stock.matrix
stock.matrix <- rbind(stock.matrix, FB)
stock.matrix
rowMeans(stock.matrix)
stock.matrix
rowMeans(stock.matrix)
Avg <- rowMeans(stock.matrix)
Avg
stock.matrix
cbind(stock.matrix, Avg)
stock.matrix <- cbind(stock.matrix, Avg)
stock.matrix
# data selection
mat
# data selection
mat[ 2,  ]
mat[  , 3 ]
mat[ 3 , 6 ]
mat
mat[3,6] <- 100
mat[ 2:3,  ]
mat[ 2:3, 6:8 ]
mat
mat[  , 2]
mat[  , c(2,4,7)]
# 1. 다음 2개의 벡터를 만듭니다.
#    A 는 1,2,3
#    B 는 4,5,6
A <- c(1,2,3)
B <- c(4,5,6)
rbind(A, B)
mat <- matrix(1:9, nrow = 3, byrow = T)
mat
# 4. 위의 mat가 행렬인지 확인하는 코드를 작성.
is.matrix(mat)
# 5. 1~25까지 행으로 연속된 5X5 행렬, mat2를 만드세요.
mat2 <- matrix(1:25, nrow = 5, byrow = T)
mat2
# 6. mat2 행렬에서 다음처럼 필요한 부분만 가져오세요.
#    [7, 8]
#    [12,13]
mat2[ 2:3 , 2:3 ]
mat2[ 4:5, 4:5]
# 8. 모든원소의 합은?
sum(mat2)
# 9. runif() 함수를 찾아보고, 랜덤 유니폼
?runif
runif(10)
runif(10, min=100, max=200)
matrix( runif(20, min=0, max=100) , nrow = 4 )
source('~/GitHub/radsp/week02/01_BasketballData.R', encoding = 'UTF-8', echo=TRUE)
Games
View(Games)
View(Games)
Games[ 3 , 8 ]
# LeBronJames가 2012년도에 몇게임을 뛰었는가??
rownames(Games)
colnames(Games)
Games[ 'LeBronJames' , '2012' ]
Games[ 3, 8]
Games[ 'LebronJames' , '2012' ]
Games[ 'LeBronJames' , '2012' ]
Games[ 3, 8]
MinutesPlayed / Games
MinutesPlayed / Games
Min.per.Game <- MinutesPlayed / Games
round(Min.per.Game, 2)
round(Min.per.Game, 1)
Min.per.Game <- round(Min.per.Game, 1)
Min.per.Game
Min.per.Game[  c('ChrisBosh','LeBronJames','KobeBryant'),  ]
Min.per.Game[c('ChrisBosh','LeBronJames','KobeBryant'),c('2013','2014')]
#Matrix
FreeThrows <- rbind(KobeBryant_FT, JoeJohnson_FT, LeBronJames_FT,
CarmeloAnthony_FT, DwightHoward_FT,ChrisBosh_FT,
ChrisPaul_FT,KevinDurant_FT,DerrickRose_FT,
DwayneWade_FT)
#Free Throws
KobeBryant_FT <- c(696,667,623,483,439,483,381,525,18,196)
JoeJohnson_FT <- c(261,235,316,299,220,195,158,132,159,141)
LeBronJames_FT <- c(601,489,549,594,593,503,387,403,439,375)
CarmeloAnthony_FT <- c(573,459,464,371,508,507,295,425,459,189)
DwightHoward_FT <- c(356,390,529,504,483,546,281,355,349,143)
ChrisBosh_FT <- c(474,463,472,504,470,384,229,241,223,179)
ChrisPaul_FT <- c(394,292,332,455,161,337,260,286,295,289)
KevinDurant_FT <- c(209,209,391,452,756,594,431,679,703,146)
DerrickRose_FT <- c(146,146,146,197,259,476,194,0,27,152)
DwayneWade_FT <- c(629,432,354,590,534,494,235,308,189,284)
#Matrix
FreeThrows <- rbind(KobeBryant_FT, JoeJohnson_FT, LeBronJames_FT,
CarmeloAnthony_FT, DwightHoward_FT,ChrisBosh_FT,
ChrisPaul_FT,KevinDurant_FT,DerrickRose_FT,
DwayneWade_FT)
#Free Throw Attempts
KobeBryant_FTA <- c(819,768,742,564,541,583,451,626,21,241)
JoeJohnson_FTA <- c(330,314,379,362,269,243,186,161,195,176)
LeBronJames_FTA <- c(814,701,771,762,773,663,502,535,585,528)
CarmeloAnthony_FTA <- c(709,568,590,468,612,605,367,512,541,237)
DwightHoward_FTA <- c(598,666,897,849,816,916,572,721,638,271)
ChrisBosh_FTA <- c(581,590,559,617,590,471,279,302,272,232)
ChrisPaul_FTA <- c(465,357,390,524,190,384,302,323,345,321)
KevinDurant_FTA <- c(256,256,448,524,840,675,501,750,805,171)
DerrickRose_FTA <- c(205,205,205,250,338,555,239,0,32,187)
DwayneWade_FTA <- c(803,535,467,771,702,652,297,425,258,370)
#Matrix
FreeThrowAttempts <- rbind(KobeBryant_FTA,JoeJohnson_FTA,
LeBronJames_FTA,CarmeloAnthony_FTA,
DwightHoward_FTA,ChrisBosh_FTA,
ChrisPaul_FTA, KevinDurant_FTA,
DerrickRose_FTA,DwayneWade_FTA)
#Matrix
FreeThrowAttempts <- rbind(KobeBryant_FTA,JoeJohnson_FTA,
LeBronJames_FTA,CarmeloAnthony_FTA,
DwightHoward_FTA,ChrisBosh_FTA,
ChrisPaul_FTA, KevinDurant_FTA,
DerrickRose_FTA,DwayneWade_FTA)
#Matrix
FreeThrowAttempts <- rbind(KobeBryant_FTA,JoeJohnson_FTA,
LeBronJames_FTA,CarmeloAnthony_FTA,
DwightHoward_FTA,ChrisBosh_FTA,
ChrisPaul_FTA, KevinDurant_FTA,
DerrickRose_FTA,DwayneWade_FTA)
# 2. 이제 위의 개인별 벡터들은 필요 없으니, 메모리에서 삭제합니다.
rm(KobeBryant_FT,
JoeJohnson_FT,
LeBronJames_FT,
CarmeloAnthony_FT,
DwightHoward_FT,
ChrisBosh_FT,
ChrisPaul_FT,
KevinDurant_FT,
DerrickRose_FT,
DwayneWade_FT)
# 3. 위 행렬의 행과 열에 이름을 붙여줍니다. 행은 사람이름(Players), 열은 시즌년도(Seasons)로 합니다.
FreeThrows
rownames(FreeThrows)  <- Players
colnames(FreeThrows)  <- Seasons
FreeThrows
# 5. 필요 없는 벡터는 메모리에서 삭제.
rm(KobeBryant_FTA,
oeJohnson_FTALeBronJames_FTA,
CarmeloAnthony_FTA,
DwightHoward_FTA,
ChrisBosh_FTA,
ChrisPaul_FTA,
KevinDurant_FTA,
DerrickRose_FTA,
DwayneWade_FTA)
# 5. 필요 없는 벡터는 메모리에서 삭제.
rm(KobeBryant_FTA,
JoeJohnson_FTALeBronJames_FTA,
CarmeloAnthony_FTA,
DwightHoward_FTA,
ChrisBosh_FTA,
ChrisPaul_FTA,
KevinDurant_FTA,
DerrickRose_FTA,
DwayneWade_FTA)
# 6. 위의 행렬에서 행은 사람이름(Players), 열은 년도(Seasons)를 네이밍 합니다.
rownames(FreeThrowAttempts) <- Players
colnames(FreeThrowAttempts) <- Seasons
myplot <- function(z, who=1:10) {
matplot(t(z[who,,drop=F]), type="b", pch=15:18, col=c(1:4,6), main="Basketball Players Analysis")
legend("bottomleft", inset=0.01, legend=Players[who], col=c(1:4,6), pch=15:18, horiz=F)
}
# 다음처럼 비주얼라이징 할수 있음을 확인하시고, 아래 문제를 풀겠습니다.
myplot(FreeThrows)
myplot(FreeThrowAttempts)
myplot(FreeThrowAttempts/Games)
