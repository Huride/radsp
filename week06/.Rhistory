x <- 0
while(x < 10){
paste("x is : ", x)
x <- x + 1
}
while(x < 10){
print('hello')
x <- x + 1
}
while(x < 10){
print('hello')
x <- x + 1
}
while(x < 10){
print('hello')
x <- x + 1
}
x <- 0
while(x < 10){
print('hello')
x <- x + 1
}
x <- 0
x <- 0
while(x < 10){
print(paste('x is : ', x))
x <- x + 1
}
x <- 0
while(x < 10){
paste('x is : ', x)
x <- x + 1
}
x <- 0
while(x < 10){
print(paste('x is : ', x))
x <- x + 1
}
x <- 0
while(x < 10){
print(paste('x is : ', x))
x <- x + 1
}
x <- 0
while(x < 10){
print(paste('x is : ', x))
x <- x + 1
}
x <- 0
while(x < 10){
print(paste('x is : ', x))
}
while(x < 10){
if(x == 3){
print("Bye")
break
}
print(paste('x is : ', x))
x <- x + 1
}
vec <- 1:5
vec
for(data in vec){
print(data + 10)
}
mat <- matrix(1:25, nrow = 5)
mat
for( num in mat){
print(num + 10)
}
for( i in 2:9 ){
for ( j in 1:9 ){
print(paste(i, 'X', j , '=', i*j))
}
}
readline(prompt = "단을 입력하세요. : ")
step <- readline(prompt = "단을 입력하세요. : ")
step * 1
step <- as.numeric(step)
for(i in 1:9){
print( paste(step, "X", i, "=", step*i)  )
}
for(i in 1:9){
print('hello')
print( paste(step, "X", i, "=", step*i)  )
}
for(i in 1:9){
print('hello') print( paste(step, "X", i, "=", step*i)  )
}
for(i in 1:9){
print( paste(step, "X", i, "=", step*i)  )
}
step <- readline(prompt = "단을 입력하세요. : ")
step <- as.numeric(step)
for(i in 1:9){
print( paste(step, "X", i, "=", step*i)  )
}
setwd("~/GitHub/radsp")
setwd("~/GitHub/radsp/week06")
library(ggplot2)
# 1. Economist_Assignment_Data.csv 파일을 읽으세요.
df <- read.csv('Economist_Assignment_Data.csv')
View(df)
View(df)
df <- df[ , -1]
View(df)
View(df)
pl <- ggplot(df, aes(x=CPI, y=HDI, color=Region)) +
geom_point()
pl
pl <- ggplot(df, aes(x=CPI, y=HDI, color=Region)) +
geom_point(size = 4, shape = 1)
pl
pl + geom_smooth()
pl + geom_smooth(aes(group=1))
pl2 <- pl + geom_smooth(aes(group=1) ,
method = 'lm',
formula = y ~ log(x),
se = F,
color ='red')
pl2
View(df)
pl2 + geom_text(aes(label = Country))
pointsToLabel <- c("Russia", "Venezuela", "Iraq", "Myanmar", "Sudan",
"Afghanistan", "Congo", "Greece", "Argentina", "Brazil",
"India", "Italy", "China", "South Africa", "Spane",
"Botswana", "Cape Verde", "Bhutan", "Rwanda", "France",
"United States", "Germany", "Britain", "Barbados", "Norway", "Japan",
"New Zealand", "Singapore")
selected.country <- subset(df, Country %in% pointsToLabel)
View(selected.country)
View(selected.country)
pl3 <- pl2 + geom_text(aes(label = Country) ,
data = selected.country,
color = 'gray20',
check_overlap = T)
pl3
pl4 <- pl3 + theme_bw()
pl4
pl5 <- pl4 + scale_x_continuous(
name = "Corruption Perceptions Index",
limits = c(0.9, 10.5),
breaks = c(1,3,5,7,9))
pl5
pl5 <- pl4 + scale_x_continuous(
name = "Corruption Perceptions Index",
limits = c(0.9, 10.5),
breaks = 1:10)
pl5
pl6 <- pl5 + scale_y_continuous(
name = "Human development Index",
limits = c(0.2, 1.0)
)
pl6 <- pl5 + scale_y_continuous(
name = "Human development Index",
limits = c(0.2, 1.0))
pl6
pl7 <- pl6 + ggtitle("Corruption and Human Development")
pl7
install.packages('ggthemes')
library(ggthemes)
pl7 + theme_economist_white()
library(ggplot2)
mov <- read.csv("21_ex-movie-Data.csv")
View(mov)
# 0. 데이터 먼저 파악하기.
summary(mov)
filter <- mov$Budget...mill. == max(mov$Budget...mill.)
mov[ filter, ]
View(mov)
colnames(mov)
mov[ filter,  c("Director" , "Movie.Title" ) ]
mov[ filter,  c("Movie.Title" ) ]
filter <- mov$Budget...mill. == min(mov$Budget...mill.)
colnames(mov)
mov[ filter,  c("Movie.Title" ) ]
filter <- mov$IMDb.Rating == min(mov$IMDb.Rating)
mov[ filter, c("Movie.Title", "Release.Date")]
filter <- mov$IMDb.Rating == min(mov$IMDb.Rating)
mov[ filter, c("Movie.Title", "Release.Date")]
filter <- mov$MovieLens.Rating == min(mov$MovieLens.Rating)
mov[ filter, c("Movie.Title", "Release.Date")]
filter <- mov$MovieLens.Rating == max(mov$MovieLens.Rating)
mov[ filter, c("Movie.Title", "Release.Date")]
filter <- mov$IMDb.Rating == max(mov$IMDb.Rating)
mov[ filter, c("Movie.Title", "Release.Date")]
# 1. 무슨요일에 많은지,
# 요일별로 데이터를 카운팅하여 바 플롯으로 나타낸다.
ggplot(data = mov, aes(x=Day.of.Week)) + geom_bar()
# 2. 장르는 'action', 'adventure', 'animation', 'comedy','drama' 인 데이터만 다루겠습니다.
# filt 라는 변수 사용.
str(mov)
library(dplyr)
distinct(select(mov, Genre))
View(mov)
filt <- mov$Genre %in% c('action', 'adventure', 'animation', 'comedy','drama')
filt2 <- mov$Studio %in% c('Buena vista Studios', 'WB', 'Fox', 'Universal', 'Sony', 'Paramount Pictures')
mov2 <- mov[ filt & filt2  ,    ]
View(mov2)
# ggplt으로 x=Genre, y=Gross...US 으로 만듭니다.
# 5. 점으로 표현하는 geom_point()를 이용해서 차트를 그려보세요.
p <- ggplot(data = mov2, aes(x=Genre, y=Gross...US))
p
p + geom_point()
# 6. 박스플롯으로 차트를 그려보세요.
p + geom_boxplot()
# 7. 위의 박스플롯과 더불어, 아웃라이어가 표시되도록, 분포를 점으로도 함께 나타내세요.
p + geom_boxplot() + geom_jitter()
p + geom_boxplot() + geom_jitter(aes(size=Budget...mill.))
p + geom_boxplot() + geom_jitter(aes(size=Budget...mill. ,
color=Studio))
# 10. 박스플롯의 투명도를 0.7 로 설정하여, 점들을 흐리게 표시합니다.
p + geom_jitter(aes(size=Budget...mill. ,
color=Studio)) +
geom_boxplot()
# 10. 박스플롯의 투명도를 0.7 로 설정하여, 점들을 흐리게 표시합니다.
p + geom_jitter(aes(size=Budget...mill. ,
color=Studio)) +
geom_boxplot(alpha = 0.7)
# 10. 박스플롯의 투명도를 0.7 로 설정하여, 점들을 흐리게 표시합니다.
q <- p + geom_jitter(aes(size=Budget...mill. ,
color=Studio)) +
geom_boxplot(alpha = 0.7)
q
# 11. x 레이블, y 레이블, 타이틀을 달아줍니다.
# x레이블은 Genre 로, y 레이브른 Gross % US 로 , 타이틀은 Domestic Gross % by Genre
q + xlab('Genre') + ylab('Gross % US') +
ggtitle('Domestic Gross % by Genre')
q + xlab('Genre') + ylab('Gross % US') +
ggtitle('Domestic Gross % by Genre') +
theme(axis.title.x = element_text(color = "blue", size=30),
axis.title.y = element_text(color = "blue", size=30),
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
plot.title = element_text(size = 40),
legend.title = element_text(size = 20),
legend.text = element_text(size = 20))
q <- q + xlab('Genre') + ylab('Gross % US') +
ggtitle('Domestic Gross % by Genre') +
theme(axis.title.x = element_text(color = "blue", size=30),
axis.title.y = element_text(color = "blue", size=30),
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
plot.title = element_text(size = 40),
legend.title = element_text(size = 20),
legend.text = element_text(size = 20))
q
q$labels$size <- 'Budget $M'
q
# 1. importing the dataset
dataset = read.csv('Data.csv')
View(dataset)
# 2. NA 데이터가 있는지 확인하고, 처리.
any(is.na(dataset))
sum(is.na(dataset))
colSums(is.na(dataset))
# 처리하는 방법은 2 가지.
new.dataset <- na.omit(dataset)
View(new.dataset)
new.dataset2 <- sapply(dataset, function(x) ifesle(
is.na(x), mean(x, na.rm = T), x
))
new.dataset2 <- sapply(dataset, function(x) ifesle(is.na(x), mean(x, na.rm = T), x))
new.dataset2 <- sapply(dataset, function(x) ifelse(
is.na(x),
mean(x, na.rm = T),
x))
View(new.dataset2)
# 3. 카테고리컬 데이터 처리.
dataset <- new.dataset
str(dataset)
View(dataset)
# 먼저, 카테코리컬 데이터의 전체 유니크한 값을 구한다.
as.factor(dataset$Country)
# 먼저, 카테코리컬 데이터의 전체 유니크한 값을 구한다.
levels(as.factor(dataset$Country))
# 먼저, 카테코리컬 데이터의 전체 유니크한 값을 구한다.
country.levels <- levels( as.factor(dataset$Country) )
length(country.levels)
dataset$Country <- factor(dataset$Country,
levels = country.levels,
labels = 1:length(country.levels))
str(dataset)
View(dataset)
dataset$Purchased <- factor(dataset$Purchased,
levles = c('No', 'Yes'),
labels = 0:1)
dataset$Purchased <- factor(dataset$Purchased,
levles = c('No', 'Yes'),
labels = c(0,1))
dataset$Purchased <- factor(dataset$Purchased,
levels = c('No', 'Yes'),
labels = 0:1)
# 4. Splitting the dataset into Training set and Test set
install.packages('caTools')
library(caTools)
set.seed(123)
split <- sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set <- subset(dataset, split == T)
test_set <- subset(dataset, split == F)
View(training_set)
View(test_set)
View(dataset)
View(training_set)
scale(training_set[  , 2:3 ]  )
scale( training_set[  , 2:3 ]  )
scale( training_set[  , 2:3 ]  )
training_set[ , 2:3] <- scale( training_set[  , 2:3 ]  )
View(training_set)
summary(training_set)
scale( test_set[  , 2:3] )
test_set[ , 2:3] <- scale( test_set[  , 2:3] )
dataset <- read.csv('Salary_Data.csv')
dataset <- read.csv('Salary_Data.csv')
View(dataset)
sum(is.na(dataset))
library(caTools)
set.seed(123)
split <- sample.split(dataset$Salary, SplitRatio = 2/3)
training_set <- subset(dataset, split == T)
test_set <- subset(dataset, split ==F)
View(training_set)
View(test_set)
# 모델링.
colnames(training_set)
regressor <- lm(formula = Salary ~ YearsExperience,
data = training_set)
summary(regressor)
View(dataset)
9365 * 10  + 25592
View(test_set)
# 검증 : 테스트셋.
predict(regressor, newdata = test_set[ , 1])
# 검증 : 테스트셋.
predict(regressor, newdata = test_set)
# 검증 : 테스트셋.
y_pred <- predict(regressor, newdata = test_set)
y_pred
cbind( test_set, y_pred )
results <- cbind( test_set, y_pred )
View(results)
library(ggplot2)
ggplot() +
geom_point(aes(x=training_set$YearsExperience,
y = training_set$Salary),
color = 'red') +
geom_line(aes(x=training_set$YearsExperience,
y=predict(regressor, newdata = training_set)),
color = 'blue') +
ggtitle('Salary vs Experience (Training set)') +
xlab('Years of Experience') +
ylab('Salary')
ggplot() +
geom_point(aes(x=test_set$YearsExperience,
y = test_set$Salary),
color = 'red') +
geom_line(aes(x=test_set$YearsExperience,
y=predict(regressor, newdata = test_set)),
color = 'blue') +
ggtitle('Salary vs Experience (Test set)') +
xlab('Years of Experience') +
ylab('Salary')
