x <- 0
while(x < 10){
paste("x is : ", x)
x <- x + 1
}
while(x < 10){
print('hello')
x <- x + 1
}
while(x < 10){
print('hello')
x <- x + 1
}
while(x < 10){
print('hello')
x <- x + 1
}
x <- 0
while(x < 10){
print('hello')
x <- x + 1
}
x <- 0
x <- 0
while(x < 10){
print(paste('x is : ', x))
x <- x + 1
}
x <- 0
while(x < 10){
paste('x is : ', x)
x <- x + 1
}
x <- 0
while(x < 10){
print(paste('x is : ', x))
x <- x + 1
}
x <- 0
while(x < 10){
print(paste('x is : ', x))
x <- x + 1
}
x <- 0
while(x < 10){
print(paste('x is : ', x))
x <- x + 1
}
x <- 0
while(x < 10){
print(paste('x is : ', x))
}
while(x < 10){
if(x == 3){
print("Bye")
break
}
print(paste('x is : ', x))
x <- x + 1
}
vec <- 1:5
vec
for(data in vec){
print(data + 10)
}
mat <- matrix(1:25, nrow = 5)
mat
for( num in mat){
print(num + 10)
}
for( i in 2:9 ){
for ( j in 1:9 ){
print(paste(i, 'X', j , '=', i*j))
}
}
readline(prompt = "단을 입력하세요. : ")
step <- readline(prompt = "단을 입력하세요. : ")
step * 1
step <- as.numeric(step)
for(i in 1:9){
print( paste(step, "X", i, "=", step*i)  )
}
for(i in 1:9){
print('hello')
print( paste(step, "X", i, "=", step*i)  )
}
for(i in 1:9){
print('hello') print( paste(step, "X", i, "=", step*i)  )
}
for(i in 1:9){
print( paste(step, "X", i, "=", step*i)  )
}
step <- readline(prompt = "단을 입력하세요. : ")
step <- as.numeric(step)
for(i in 1:9){
print( paste(step, "X", i, "=", step*i)  )
}
setwd("~/GitHub/radsp/week03")
library(xlsx)
rm(i)
rm(step)
stats <- read.csv('edu-Demographic-Data.csv')
View(stats)
nrow(stats)
ncol(stats)
head(stats)
head(stats)
head(stats)
tail(stats)
str(stats)
summary(stats)
stats[ 3, ]
stats
head(stats)
rownames(stats)
rownames(stats) <- stats$Country.Name
head(stats)
stats['Angola', ]
stats['Angola',  c('Birth.rate','Internet.users') ]
stats$Internet.users
# 인터넷 사용률에서 123번째 데이터
stats$Internet.users[123]
# 20부터 30번째까지 데이터,
stats[ 20:30   ,  ]
stats$Country.Name
# 한국과 앙골라 두 나라의 데이터 비교.
stats[ c( "Korea, Rep.", 'Angola')  ,    ]
stats[1 , ]
stats[  , 1]
stats[  , 1 , drop = F ]
stats[  , 3 , drop = F ]
stats$Birth.rate * stats$Internet.users
stats$My.col <- stats$Birth.rate * stats$Internet.users
#
stats$test <- 1:5
str(stats)
v1 <- 1:12
v2 <- 10:32
v1
v2
v1 + v2
v3 <- 5:7
v1 + v3
length(v1)
length(v3)
length(v2)
stats$My.col <- NULL
stats$test <- NULL
# 필터링.
# 인터넷 사용률이 2보다 작은 나라들 찾기.
filter <- stats$Internet.users < 2
stats[ filter, ]
# 인터넷 사용률이 2보다 작거나 인컴그룹이 "Low income"인 나라 찾기.
filter <- stats$Internet.users < 2 | stats$Income.Group == 'Low income'
stats[ filter, ]
subset(stats, Internet.users < 2)
subset(stats, Internet.users <2 | Income.Group == 'Low income')
## 카테고리컬 데이터 처리
str(stats)
as.factor(stats$Income.Group)
stats$Income.Group <- as.factor(stats$Income.Group)
str(stats)
levels( stats$Income.Group )
stats[ stats$Income.Group == "Lower middle income" ,   ]
levels( stats$Income.Group )
# 1. 파일을 읽기 위해서 디렉토리 경로 확인 및 설정.
getwd()
setwd("~/GitHub/radsp/week03")
setwd("~/GitHub/radsp/week03")
data <-  read.csv('demographic-data.csv')
View(data)
data <-  read.csv('demographic-data.csv')
data <-  read.csv('demographic-data.csv')
View(data)
View(data)
getwd()
data <-  read.csv('demographic-data.csv')
# 3. 기본적인 데이터 확인하기. (데이터 확인하는 기본 함수 4개 할용)
head(data)
str(data)
# 4. Year (년도) 컬럼의 값을 카테고리화 하여 사용하려 합니다.
# 즉 년도별로 데이터를 처리하기 위해서, 년도가 몇개로 되어있는지확인하세요.
as.factor(data$Year)
# 4. Year (년도) 컬럼의 값을 카테고리화 하여 사용하려 합니다.
# 즉 년도별로 데이터를 처리하기 위해서, 년도가 몇개로 되어있는지확인하세요.
data$Year <- as.factor(data$Year)
levels(data$Year)
as.factor(data$Region)
levels(as.factor(data$Region))
data1960 <- data[ data$Year == 1960  ,   ]
data2013 <- data[ data$Year == 2013 ,  ]
# 6. 각각의 데이터프레임은 몇개의 데이터(행)를 가지고 있는지 확인하세요.
nrow(data1960)
nrow(data2013)
source('~/GitHub/radsp/week03/04_1_CountryRegionVectors.R', echo=TRUE)
add1960 <- data.frame(Code = Country_Code,
Life.Exp = Life_Expectancy_At_Birth_1960)
head(add1960)
add2013 <- data.frame(Code = Country_Code,
Life.Exp = Life_Expectancy_At_Birth_2013)
# 10. 위의 두 데이터프레임을 서머리 해 보세요.
summary(add1960)
summary(add2013)
View(data1960)
View(data1960)
View(add1960)
View(data1960)
View(add1960)
# 10. data1960과, add1960 두 데이터프레임을 합쳐서 merged1960 으로 만듭니다.
# (국가코드로 합치면 됩니다.)
# 마찬가지로 data2013과 add2013 두 데이터프레임을 merged2013으로 합칩니다.
colnames(data1960)
colnames(add1960)
merged1960 <- merge(data1960, add1960,
by.x = "Country.Code", by.y = "Code")
View(merged1960)
merged2013 <- merge(data2013, add2013,
by.x = "Country.Code", by.y = "Code")
# 11. 각각 구조를 확인해 보세요.
str(merged1960)
str(merged2013)
# 12. 이제 필요없는 컬럼인 Year 컬럼을 지웁니다.
# 위의 두 데이터프레임 각각  Year 를 지우세요.
merged1960$Year <- NULL
merged2013$Year <- NULL
# 13. ggplot2 라이브러리를 사용하겠습니다. (아래 실행하세요.)
install.packages('ggplot2')
library(ggplot2)
qplot(data=merged1960, x=Fertility.Rate, y = Life.Exp, color=Region,
size=I(5), alpha=I(0.6), main="Life Expectancy vs Fertility  1960")
qplot(data=merged2013, x=Fertility.Rate, y = Life.Exp, color=Region,
size=I(5), alpha=I(0.6), main="Life Expectancy vs Fertility  2013")
x <- 10
x <- 10
x < 20
x > 5
x < 20 & x > 5
x == 2 & x > 1
x == 2 | x > 1
x > 10
!(x > 10)
!!(x > 10)
hot <- FALSE
temp <- 60
if (temp > 80) {
hot <- TRUE
}
if (temp > 80) {
hot <- TRUE
}
if (temp > 40) {
hot <- TRUE
}
if (temp > 40 ){
print('Hot')
} else  {
print('Not Hot')
}
# temp가 40보다 크면, Hot 이라고 화면에 출력하고,
# 그렇지 않으면, Not Hot 이라고 출력하겠다.
temp <- 30
if (temp > 40 ){
print('Hot')
} else  {
print('Not Hot')
}
# temp가 40보다 크면, Hot 이라고 화면에 출력하고,
# 그렇지 않으면, Not Hot 이라고 출력하겠다.
temp <- 50
if (temp > 40 ){
print('Hot')
} else  {
print('Not Hot')
}
if(temp >= 80) {
print('Hot')
} else if ( temp >= 50 & temp < 80 ){
print('Nice')
} else if (temp >= 32 & temp < 50 ){
print('Cool')
} else {
print('Cold')
}
# temp가 80이상이면 , Hot 이라고 출력하고,
# 50이상 80미만이면, Nice 라고 출력하고,
# 32이상 50미만이면, Cool 라고 출력하고,
# 위의 조건 아무것도 만족하지 않으면, Cold라고 출력.
temp <- 20
if(temp >= 80) {
print('Hot')
} else if ( TRUE ){
print('Nice')
} else if (temp >= 32 & temp < 50 ){
print('Cool')
} else {
print('Cold')
}
# temp가 80이상이면 , Hot 이라고 출력하고,
# 50이상 80미만이면, Nice 라고 출력하고,
# 32이상 50미만이면, Cool 라고 출력하고,
# 위의 조건 아무것도 만족하지 않으면, Cold라고 출력.
temp <- 20
if(temp >= 80) {
print('Hot')
} else if ( TRUE ){
print('Nice')
} else if (temp >= 32 & temp < 50 ){
print('Cool')
} else {
print('Cold')
}
# temp가 80이상이면 , Hot 이라고 출력하고,
# 50이상 80미만이면, Nice 라고 출력하고,
# 32이상 50미만이면, Cool 라고 출력하고,
# 위의 조건 아무것도 만족하지 않으면, Cold라고 출력.
temp <- 20
if(temp >= 80) {
print('Hot')
} else if ( temp >= 50 & temp < 80 ){
print('Nice')
} else if (temp >= 32 & temp < 50 ){
print('Cool')
} else {
print('Cold')
}
x <- 1
if(x == 1) {
print('Hello')
}
x <- 3 # Change x to test
x <- 3 # Change x to test
if ( x %% 2 == 0 ){
print("Even Number")
} else {
print("Not Even")
}
x <- matrix()
x <- matrix()
if ( is.matrix(x) ){
print("Is a Matrix")
}else{
print("Not a Matrix")
}
# hint : 유저 입력은 readline 함수 이용.
# http://www.rexamples.com/4/Reading%20user%20input
?readline
readline(prompt = "점수 입력 : ")
readline(prompt = "점수 입력 : ")
score <- readline(prompt = "점수 입력 : ")
score <- as.numeric(score)
if(score < 0 | score > 100){
print("잘못입력하셨습니다.")
}else if(score >= 80){
print("A학점입니다.")
}else {
print('B학점입니다.')
}
v <- c(15,7,11)
v[1]
v[2]
v[3]
if ( v[1] > v[2] & v[1] > v[3]){
print(v[1])
} else if ( v[2] > v[3] ){
print(v[2])
} else {
print( v[3])
}
v <- c(15,27,11)
if ( v[1] > v[2] & v[1] > v[3]){
print(v[1])
} else if ( v[2] > v[3] ){
print(v[2])
} else {
print( v[3])
}
v <- c(15,27,41)
if ( v[1] > v[2] & v[1] > v[3]){
print(v[1])
} else if ( v[2] > v[3] ){
print(v[2])
} else {
print( v[3])
}
