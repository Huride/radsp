x <- 0
while(x < 10){
paste("x is : ", x)
x <- x + 1
}
while(x < 10){
print('hello')
x <- x + 1
}
while(x < 10){
print('hello')
x <- x + 1
}
while(x < 10){
print('hello')
x <- x + 1
}
x <- 0
while(x < 10){
print('hello')
x <- x + 1
}
x <- 0
x <- 0
while(x < 10){
print(paste('x is : ', x))
x <- x + 1
}
x <- 0
while(x < 10){
paste('x is : ', x)
x <- x + 1
}
x <- 0
while(x < 10){
print(paste('x is : ', x))
x <- x + 1
}
x <- 0
while(x < 10){
print(paste('x is : ', x))
x <- x + 1
}
x <- 0
while(x < 10){
print(paste('x is : ', x))
x <- x + 1
}
x <- 0
while(x < 10){
print(paste('x is : ', x))
}
while(x < 10){
if(x == 3){
print("Bye")
break
}
print(paste('x is : ', x))
x <- x + 1
}
vec <- 1:5
vec
for(data in vec){
print(data + 10)
}
mat <- matrix(1:25, nrow = 5)
mat
for( num in mat){
print(num + 10)
}
for( i in 2:9 ){
for ( j in 1:9 ){
print(paste(i, 'X', j , '=', i*j))
}
}
readline(prompt = "단을 입력하세요. : ")
step <- readline(prompt = "단을 입력하세요. : ")
step * 1
step <- as.numeric(step)
for(i in 1:9){
print( paste(step, "X", i, "=", step*i)  )
}
for(i in 1:9){
print('hello')
print( paste(step, "X", i, "=", step*i)  )
}
for(i in 1:9){
print('hello') print( paste(step, "X", i, "=", step*i)  )
}
for(i in 1:9){
print( paste(step, "X", i, "=", step*i)  )
}
step <- readline(prompt = "단을 입력하세요. : ")
step <- as.numeric(step)
for(i in 1:9){
print( paste(step, "X", i, "=", step*i)  )
}
setwd("~/GitHub/radsp/week03")
empty <- data.frame()
c1 <- 1:10
c1 <- 1:10   # c(1,2,3,4,5,6,7,8,9,10)
letters
letters[1:10]
empty <- data.frame()
c1 <- 1:10   # c(1,2,3,4,5,6,7,8,9,10)
letters[1:10]
c2 <- letters[1:10]
is.vector(c1)
is.vector(c2)
class(v1)
class(c1)
class(c2)
df <- data.frame(c1, c2)
View(df)
df <- data.frame(num = c1, letter = c2)
View(df)
setwd("~/GitHub/radsp/week03")
d2 <- read.csv('example.csv')
head(d2)
tail(d2)
summary(d2)
str(d2)
getwd()
nrow(df)
ncol(df)
colnames(df)
rownames(df)
df
df[ 4, ]
rownames(df) <- letters[1:10]
df
df[ 'g', ]
df[ 7,  ]
df[ 3:5 ,   ]
df[  , 2 ]
df$letter
mtcars
mtcars
cars <- mtcars
View(cars)
head(cars)
cars$mpg
sum(cars$mpg)
mean(cars$mpg)
max(cars$mpg)
df
View(df)
df2 <- data.frame(num = 100, letter = 'hello')
rbind(df, df2)
rbind(df, df2, df2, df)
df3 <- rbind(df, df2, df2, df)
df$newcol <- 101:110
df
df$mul <- df$num * df$newcol
df
colnames(df)
colnames(df)[1]
colnames(df)[1]  <-  'score'
df
df[ 6, ]
df[ -6, ]
df.new <- df[ -6, ]
df[   ,  -3 ]
df$score > 6
filter <- df$score > 6
df[ filter  ,  ]
filter <- df$score > 6 & df$letter == 'i'
df[filter ,   ]
# 스코어는 6보다 크고, letter 가 i 인 데이터에서 mul를
# 가져오시오.
df[filter,  'mul' ]
is.na(df)
any(is.na(df))
sum(is.na(df))
colSums(is.na(df))
Age <- c(22, 25, 26)
Weight <- c(150, 165, 120)
Sex <- c("M","M","F")
df <- data.frame(Age, Weight, Sex)
df
rownames(df) <- c("Sam", "Frank", "Amy")
df
# 2. mtcars는 1974 Motor Trend US Megazine에 수록된 차량과 차량에 관련된 수치들이 기록된 자료이다.
# 이 데이터셋을 가져와서, 데이터프레임인지 확인하시오.
df <- mtcars
# 2. mtcars는 1974 Motor Trend US Megazine에 수록된 차량과 차량에 관련된 수치들이 기록된 자료이다.
# 이 데이터셋을 가져와서, 데이터프레임인지 확인하시오.
df <- mtcars
View(df)
is.data.frame(df)
# 3. 1~25까지 연속된 숫자로 행렬을 만드세요.
# 그리고 이 행렬을, 데이터프레임으로 변환하시오.
mat <- matrix(1:25, nrow = 5)
is.matrix(mat)
is.data.frame(mat)
df <- as.data.frame(mat)
is.data.frame(df)
# 4. mtcars 를 df 에 저장하세요. 아래 예제는 이 df 를 가지고 하겠습니다.
df <- mtcars
# 5. df의 처음 6행을 출력하세요.
head(df)
head(df, 10)
View(df)
# 6. mpg(마일 퍼 갤런)의 평규값을 구하세요.
df$mpg
# 6. mpg(마일 퍼 갤런)의 평규값을 구하세요.
mean( df$mpg )
# 7. 6 cylinders (cyl column)를 가진 데이터를 뽑아내세요.
filter <- df$cyl == 6
df[ filter  ,   ]
new.df <- df[ filter  ,   ]
View(new.df)
# 8. 다음 3개의 컬럼 am,gear, carb 만 나타내세요.
df[  ,  9:11 ]
df[  ,  'am' ]
df[  ,  c('am','gear','carb' ]
df[  ,  c('am','gear','carb') ]
# carb, gear, am
df[  ,  c('carb', 'gear','am')]
View(df)
# 9. 성능(performance)을 계산하여(hp/wt) 컬럼을 추가하세요.
df$performance <- df$hp / df$wt
View(df)
# 10. 위의 performance 컬럼의 소수점을 두자리로만 맞추세요. hint: round함수
round( df$performance, 2 )
View(df)
# 10. 위의 performance 컬럼의 소수점을 두자리로만 맞추세요. hint: round함수
df$performance  <- round( df$performance, 2 )
# 11. hp가 100보다 크고 wt 가 2.5보다 큰 차량들에서,
# 이 차량들의 평균 연비(mpg)가 얼마인지 보여주세요.
fliter <- df$hp > 100 & df$wt > 2.5
df[ filger  ,   ]
df[ fliter  ,   ]
df[ fliter  , 'mpg'  ]
mpg <- df[ fliter  , 'mpg'  ]
mean(mpg)
mean(df[ df$hp > 100 & df$wt > 2.5,  'mpg'])
df[ 'Hornet Sportabout'  ,   'mpg' ]
v <- 1:5
m <- matrix(1:10, nrow = 2)
df <- women
v
m
df
li <- list(v, m, df)
li
li[[1]]
li[[2]]
li[[3]]
li <- list( vec = v, score.mat <- m, women <- df)
li
li <- list( vec = v, score.mat <- m, women <- df)
li
li <- list( vec = v, score.mat = m, women = df)
li
li$vec
li$women
li[['women']]
li
View(li)
li$women
li$women[ 6,  ]
li$women[ 6, 'weight' ]
read.csv('example.csv')
read.csv('example.csv')
ex <- read.csv('example.csv')
View(ex)
head(ex)
summary(ex)
str(ex)
colSums(is.na(ex))
### 백만개 이상의 데이터를 읽어와야 한다.
# data.table
install.packages('data.table')
library(data.table)
df <- fread('example.csv')
df <- as.data.frame(df)
df
colnames(df)
colnames(df) <- "Nick.Name"
df
df <- fread('example.csv')
df <- as.data.frame(df)
colnames(df)
colnames(df)[1] <- "Nick.Name"
df
write.csv(df, file = 'myfile.csv')
View(df)
df <- read.csv('myfile.csv')
df
df$X <- NULL
df
write.csv(df, file = 'myfile.csv', row.names = FALSE)
### 엑셀파일 읽기.
install.packages('readxl')
library(readxl)
df <- read_excel('Sample-Sales-Data.xlsx')
View(df)
df <- read_excel('Sample-Sales-Data.xlsx', sheet = 'Sheeet1')
df <- read_excel('Sample-Sales-Data.xlsx', sheet = 'Sheet1')
df
df <- as.data.frame(df)
df
## 라이브러리 설치 : 엑셀 저장.
install.packages('xlsx')
library(xlsx)
write.xlsx(df, "putput.xlsx")
###  35,000,000 이런 수치데이터 처리.
df <- read.csv('test.csv')
df
###  35,000,000 이런 수치데이터 처리.
df <- read.csv('test.csv', sep = ';')
df
summary(df)
str <= "hello;my;name"
gsub(";", "", str )
str <= "hello;my;name"
str <- "hello;my;name"
gsub(";", "", str )
str <- "123,456,000"
gsub(",", "", str )
gsub("," ,"" ,df$price )
as.numeric( gsub("," ,"" ,df$price ) )
df$price <- as.numeric( gsub("," ,"" ,df$price ) )
df <- read.csv('test.csv', sep = ';')
df$price <- as.numeric( gsub("," ,"" ,df$price ) )
df
summary(df)
