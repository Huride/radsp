}
while(x < 10){
print('hello')
x <- x + 1
}
while(x < 10){
print('hello')
x <- x + 1
}
x <- 0
while(x < 10){
print('hello')
x <- x + 1
}
x <- 0
x <- 0
while(x < 10){
print(paste('x is : ', x))
x <- x + 1
}
x <- 0
while(x < 10){
paste('x is : ', x)
x <- x + 1
}
x <- 0
while(x < 10){
print(paste('x is : ', x))
x <- x + 1
}
x <- 0
while(x < 10){
print(paste('x is : ', x))
x <- x + 1
}
x <- 0
while(x < 10){
print(paste('x is : ', x))
x <- x + 1
}
x <- 0
while(x < 10){
print(paste('x is : ', x))
}
while(x < 10){
if(x == 3){
print("Bye")
break
}
print(paste('x is : ', x))
x <- x + 1
}
vec <- 1:5
vec
for(data in vec){
print(data + 10)
}
mat <- matrix(1:25, nrow = 5)
mat
for( num in mat){
print(num + 10)
}
for( i in 2:9 ){
for ( j in 1:9 ){
print(paste(i, 'X', j , '=', i*j))
}
}
readline(prompt = "단을 입력하세요. : ")
step <- readline(prompt = "단을 입력하세요. : ")
step * 1
step <- as.numeric(step)
for(i in 1:9){
print( paste(step, "X", i, "=", step*i)  )
}
for(i in 1:9){
print('hello')
print( paste(step, "X", i, "=", step*i)  )
}
for(i in 1:9){
print('hello') print( paste(step, "X", i, "=", step*i)  )
}
for(i in 1:9){
print( paste(step, "X", i, "=", step*i)  )
}
step <- readline(prompt = "단을 입력하세요. : ")
step <- as.numeric(step)
for(i in 1:9){
print( paste(step, "X", i, "=", step*i)  )
}
setwd("~/GitHub/radsp/week05")
d <- Sys.Date()
d
class(d)
d + 13
d + 137
weekdays(d)
weekdays(d+137)
# 2020,07,22
# R의 날짜 형식 Date를 , 문자열로 변환(우리 회사 형식에 맞게)
format(d, format="%Y,%m,%d")
# 2020==07?22
format(d, format="%Y==%m?%d")
format(d, format="%a")
format(d, format="%A")
format(d, format="%B")
format(d, format="%Y년")
format(d, format="%Y년 잘 되면 좋겠다.")
format(d, format="%Y년 %m잘 되면 좋겠다.")
format(d, format="%Y년 %m월 잘 되면 좋겠다.")
some.day <- d + 100
today <- "2020-07-11"
today + 100
d
class(d)
class(today)
some.day
weekdays(some.day)
t <= Sys.time()
t <- Sys.time()
t
class(t)
format(t, format = "%H시 %분")
format(t, format = "%H시 %M분")
format(t, format = "%H시 %M분 %s초초")
format(t, format = "%H시 %M분 %S초")
format(t, format = "%H시 하고고 %M분 %S초")
format(t, format = "%H시 하고 %M분 %S초")
my.date <- c("2020-07-02", "2020-08-12", "2020-07-14",
"2020-09-22")
stock <- c(234, 567, 123, 333)
my.stock <- data.frame(my.date, stock)
View(my.stock)
str(my.stock)
my.stock[ 1 , 1 ]
stock.date <- my.stock[ 1 , 1 ]
stock.date
weekdays(stock.date)
stock.date + 100
stock.date <- as.Date(stock.date)
weekdays(stock.date)
weekdays(stock.date)
my.stock$my.date
class(my.stock$my.date)
as.Date( my.stock$my.date )
my.stock$my.date <- as.Date( my.stock$my.date )
str(my.stock)
weekdays(my.stock$my.date)
my.stock$days <- weekdays(my.stock$my.date)
View(my.stock)
my.stock[ my.stock$days == "화요일" ,   ]
str(my.stock)
format( my.stock$my.date , format = "%m월")
format( my.stock$my.date , format = "%m")
format( my.stock$my.date , format = "%m월")
my.stock$month <- format( my.stock$my.date , format = "%m월")
View(my.stock)
my.date <- c("20/07/02", "20/08/12", "20/07/14",
"20/09/22")
stock <- c(234, 567, 123, 333)
new.my.date <- as.Date(my.date , format = "%y/%m/%d")
new.my.date
my.date <- c("20/07/02", "20/08/12", "20/07/14",
"20/09/22")
stock <- c(234, 567, 123, 333)
new.df <- data.frame(my.date, stock)
View(new.df)
new.df$iso <- as.Date( new.df$my.date , format = "%y/%m/%d")
View(new.df)
install.packages('dplyr')
library(dplyr)
install.packages('nycflights13')
library(nycflights13)
df <- flights
View(df)
summary(df)
str(df)
View(df)
weekdays( df$time_hour )
str(df)
df <- as.data.frame(df)
str(df)
df$days <- weekdays( df$time_hour )
View(df)
View(df)
filter <- df$month == 11
df.11 <-  df[ filter,  ]
View(df.11)
View(df)
filter(df, month == 11)
df.dplyt.11 <- filter(df, month == 11)
df.dply.11 <- filter(df, month == 11)
View(df.dplyt.11)
## 11월 3일의, carrier 가 AA 인 데이터만 가져오시오.
filter <- df$month == 11 & df$day == 3 & df$carrier == 'AA'
df[ filter  ,  ]
filter(df, month == 11, day == 3, carrier == 'AA')
# 슬라이싱.
df[ 5:10 , ]
slice(df, 5:10)
View(df)
View(df)
# carrier, arr_time, arr_delay
df[  , c('carrier','arr_time','arr_delay'  ]
# carrier, arr_time, arr_delay
df[  , c('carrier','arr_time','arr_delay')]
# carrier, arr_time, arr_delay
df2 <-  df[  , c('carrier','arr_time','arr_delay')]
View(df2)
select(df, carrier, arr_time, arr_delay)
df3 <- select(df, carrier, arr_time, arr_delay)
##  11월 3일의 carrier 가 'AA'인 데이터 중,
##  arr_delay와 dep_delay 값을 가져오시오.
filter <- df$month == 11 & df$day == 3 & df$carrier == 'AA'
df[ filter  ,  c('arr_delay', 'dep_delay')  ]
df.4 <-  df[ filter  ,  c('arr_delay', 'dep_delay')  ]
View(df.4)
df.5 <- filter(df, month == 11, day == 3, carrier == 'AA')
select(df.5, arr_delay, dep_delay)
df.6 <- select(df.5, arr_delay, dep_delay)
View(df.6)
View(df.dply.11)
View(df.dplyt.11)
View(df.4)
sorted.df <- arrange(df, year, month, day, arr_time)
View(sorted.df)
# 년도, 월은 내림차순, 날짜 내림차순, arr_time
sorted.df <- arrange(df, year, desc(month), desc(day),arr_time )
View(sorted.df)
# carrier => airline_carrier 로,  origin => ori
colnames(df)
# carrier => airline_carrier 로,  origin => ori
df.rename <- rename(df, airline_carrier = carrier, ori = origin )
View(df.rename)
View(df.rename)
View(df)
## carrier 가 도대체 몇개이며 어떤것들이냐?
distinct(  select(df, carrier) )
distinct(  select(df, origin) )
distinct(  select(df, dest) )
distinct(  select(df, ori) )
distinct(  select(df, origin) )
sample_n(df, 10)
sample_frac(df, 0.1)
sample_frac(df, 0.01)
View(df)
df$arr_delay - df$dep_delay
df$diff <- df$arr_delay - df$dep_delay
mutate(df, diff = arr_delay - dep_delay)
df.new <- mutate(df, diff = arr_delay - dep_delay)
# 수치형 데이터에 대한 요약 통계
summay(df)
# 수치형 데이터에 대한 요약 통계
summary(df)
# 수치형 데이터에 대한 요약 통계
summary(df)
mean( df$dep_time )
# 수치형 데이터에 대한 요약 통계
summary(df)
mean( df$dep_time, na.rm = TRUE )
max( df$dep_time)
sum(df$dep_time)
min(df$dep_time)
max( df$dep_time , na.rm = TRUE)
sum(df$dep_time, na.r, = TRUE)
sum(df$dep_time, na.r = TRUE)
min(df$dep_time, na.rm = T)
sum(df$dep_time, na.rm = TRUE)
View(df)
# 월별로 비행시간의 토탈값.
df.month <- group_by(df, month)
summarise(df.month, total_time = sum(air_time, na.rm = T))
df.month.sum <- summarise(df.month,
total_time = sum(air_time, na.rm = T))
# 월별로 비행시간의 토탈값.
df.month <- group_by(df, month)
df.month.sum <- summarise(df.month,
total_time = sum(air_time, na.rm = T))
View(df.month.sum)
# 월별로 dep_delay 의 평균.
df.month <- group_by(df, month)
df.mon.delay <- summarise( df.month  ,
avg = mean(dep_delay, na.rm = T))
View(df.month.sum)
View(df.month)
View(df.mon.delay)
df.mon.delay[ df.mon.delay$avg == max(df.mon.delay$avg),   ]
df.mon.delay <- summarise( df.month  ,
avg = mean(dep_delay, na.rm = T),
total = sum(dep_delay, na.rm = T))
View(df.mon.delay)
arrange(df.mon.delay, desc(avg))
df <- mtcars
View(df)
my.mpg <- filter(df, mpg > 20)
View(my.mpg)
my.mpg.5 <- sample_n(my.mpg, 5)
View(my.mpg.5)
arrange(my.mpg.5, desc(mpg))
# 파이프 연산 이용.
df %>% filter(mpg >20) %>% sample_n(5) %>% arrange(desc(mpg))
# 1.  내장 데이터인 mtcars 데이터를 이용합니다.
# 처음 6개 데이터를 출력하세요.
df <- mtcars
View(df)
head(df)
# 2.mpg 가 20보다 크고실린더가 6 개인 데이터를 가져오세요.
filter(df, mpg > 20, cyl == 6)
# 3. 데이터를 먼저 cyl로 오름차순 정렬하고,
# 해당 cyl은 wt의 내림차순 정렬합니다.
arrange(df, cyl,  desc(wt) )
# 4. Select the columns mpg and hp
select(df, mpg, hp)
View(df)
# 5. Select the distinct values of the gear column.
distinct( df$gear )
# 5. Select the distinct values of the gear column.
distinct( select(df, gear) )
# 6. "Performance" 컬럼을 새로 추가합니다.
# 이 컬럼은 hp 를 wt으로 나눈값입니다.
mutate(df, Performance = hp / wt)
# 7. Find the mean mpg value using dplyr.
summarise(df, avg = mean(mpg, na.rm = T))
# 7. Find the mean mpg value using dplyr.
summarise(df, avg = mean(mpg, na.rm = T), sum = sum(mpg, na.rm = T))
# 8. Use pipe operators to get
# the mean hp value for cars with 6 cylinders.
df %>% filter(cyl ==6) %>% summarise(avg=mean(hp, na.rm = T))
movies <- read.csv('Movie-Ratings.csv')
View(movies)
View(movies)
colnames(movies) <- c('Film', 'Genre','CriticRating',
'AudienceRating', 'BudgetMillions',
'Year')
str(movies)
distinct( select(movies, Genre) )
distinct( select(movies, Year))
movies$Year <- as.factor(movies$Year)
library(ggplot2)
# install.packages('ggplot2')
library(ggplot2)
ggplot()
# 1. 데이터 레이어
ggplot(data = movies)
# 1. 데이터 레이어
ggplot(data = movies)
# 2. 에스테틱 레이어
colnames(movies)
ggplot(data = movies, aes(x = CriticRating, y = AudienceRating))
summary(movies)
# 3. 지오메트리 레이어.
ggplot(data = movies, aes(x = CriticRating, y = AudienceRating))+
geom_point()
# 3. 지오메트리 레이어.
ggplot(data = movies, aes(x = CriticRating, y = AudienceRating))+
geom_point()
View(movies)
# 4. 칼라 셋팅 : Genre 를 컬러로 셋팅.
ggplot(data = movies,
aes(x = CriticRating, y = AudienceRating, color=Genre))
# 4. 칼라 셋팅 : Genre 를 컬러로 셋팅.
ggplot(data = movies,
aes(x = CriticRating, y = AudienceRating, color=Genre)) +
geom_point()
View(movies)
View(movies)
View(movies)
# 5. 사이즈 셋팅
ggplot(data = movies,
aes(x = CriticRating, y = AudienceRating,
color=Genre, size = BugetMillions)) + geom_point()
View(movies)
# 5. 사이즈 셋팅
colnames(movies)
ggplot(data = movies,
aes(x = CriticRating, y = AudienceRating,
color=Genre, size = BudgetMillions)) + geom_point()
####
p <- ggplot(data = movies,
aes(x = CriticRating, y = AudienceRating,
color=Genre, size = BudgetMillions))
####
p <- ggplot(data = movies,
aes(x = CriticRating, y = AudienceRating,
color=Genre, size = BudgetMillions))
p + geom_point()
p + geom_line()
p + geom_point() + geom_line()
p + geom_line() + geom_point()
p + geom_point()
p + geom_point(aes(size = CriticRating) )
p + geom_point(aes(color = BudgetMillions))
p + geom_path(aes(x= BudgetMillions)) + xlab("Budget Millions $")
p + geom_point(aes(x= BudgetMillions)) + xlab("Budget Millions $")
r <- ggplot(data = movies, aes(x=CriticRating,
y=AudienceRating))
r + geom_point(aes(color = Genre))
r + geom_point(color = 'DarkGreen')
r + geom_point(aes(color = 'DarkGreen'))
r + geom_point(color = Genre)
r + geom_point(size = 5)
r + geom_point(size = 15)
# point : 두 컬럼관의 관계 분석.
r + geom_point()
# Histogram 히스토그램
s <- ggplot(data = movies, aes(x = BudgetMillions))
s + geom_histogram()
View(movies)
s + geom_histogram(bins=100)
s + geom_histogram(binwidth = 7)
s + geom_histogram(binwidth = 10, fill = 'green')
s + geom_histogram(binwidth = 10, aes(fill='green'))
s + geom_histogram(binwidth = 10, aes(fill=Genre))
s + geom_histogram(binwidth = 10, aes(fill=Genre), color='black')
# 덴서티 차트 (밀도)
s + geom_density()
# 덴서티 차트 (밀도)
s + geom_density(aes(fill=Genre))
s + geom_density(aes(fill=Genre), position = 'stack')
# 트랜드 표시할때 사용하는 차트
u <- ggplot(data = moviesm, aes(x=CriticRating,
y=AudienceRating,
color = Genre))
# 트랜드 표시할때 사용하는 차트
u <- ggplot(data = movies, aes(x=CriticRating,
y=AudienceRating,
color = Genre))
u + geom_point()
u + geom_point() + geom_smooth()
u + geom_point() + geom_smooth(fill=NA)
# box plot
p
# box plot
p + geom_point()
# box plot
v <- ggplot(data = movies, aes(x=CriticRating
y=AudienceRating,
color=Genre))
# box plot
v <- ggplot(data = movies, aes(x=CriticRating,
y=AudienceRating,
color=Genre))
# box plot
v <- ggplot(data = movies, aes(x=Genre,
y=AudienceRating,
color=Genre))
v + geom_point()
v + geom_boxplot()
summary(movies)
v + geom_boxplot() + geom_point()
v + geom_boxplot() + geom_jitter()
v + geom_jitter() + geom_boxplot()
v + geom_jitter() + geom_boxplot(alpha=0.3)
v + geom_jitter() + geom_boxplot(alpha=0.3, size=1.3)
z <- ggplot(data = movies, aes(x  = BudgetBillions))
z + geom_histogram()
z <- ggplot(data = movies, aes(x  = BudgetMillions))
z + geom_histogram()
z + geom_histogram(binwidth = 10, aes(fill=Genre), color='black')
# 행을 장르로.
z + geom_histogram(binwidth = 10,
aes(fill=Genre),
color='black') + facet_grid(Genre ~ .)
z + geom_histogram(binwidth = 10,
aes(fill=Genre),
color='black') +
facet_grid(Genre ~ .  , scales = 'free')
w <- ggplot(data = movies, aes(x=CriticRating,
y=AudienceRating,
color = Genre))
w + geom_point(size = 3)
w + geom_point(size = 3) + facet_grid( Genre ~ . )
w + geom_point(size = 3) + facet_grid( Genre ~ Year )
p + geom_point()
# x축은 50~100 , y 축은 40~80
p + geom_point() + xlim(50, 100)
# x축은 50~100 , y 축은 40~80
p + geom_point() + xlim(50, 100) + ylim(40, 80)
z + geom_histogram()
z + geom_histogram(binwidth = 10, aes(fill=Genre),color='black')
z + xlab("Money Axis") + ylab("Number of Movies")
a <- z +
geom_histogram(binwidth = 10, aes(fill=Genre),color='black')
a + xlab("Money Axis") + ylab("Number of Movies")
# 차트의 타이틀
a + xlab("Money Axis") + ylab("Number of Movies") +
ggtitle("Movie Budget Distribution")
# 레이블 포맷팅
a + xlab("Money Axis") + ylab("Number of Movies") +
ggtitle("Movie Budget Distribution") +
theme(axis.title.x = element_text(size=30, color = "DarkGreen"))
# 레이블 포맷팅
a + xlab("Money Axis") + ylab("Number of Movies") +
ggtitle("Movie Budget Distribution") +
theme(axis.title.x = element_text(size=30, color = "DarkGreen"),
axis.title.y = element_text(size=30, color = "Red"))
# 레이블 포맷팅
a + xlab("Money Axis") + ylab("Number of Movies") +
ggtitle("Movie Budget Distribution") +
theme(axis.title.x = element_text(size=30, color = "DarkGreen"),
axis.title.y = element_text(size=30, color = "Red"),
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20))
# 레이블 포맷팅
a + xlab("Money Axis") + ylab("Number of Movies") +
ggtitle("Movie Budget Distribution") +
theme(axis.title.x = element_text(size=30, color = "DarkGreen"),
axis.title.y = element_text(size=30, color = "Red"),
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
plot.title = element_text(size=40,
color = "DarkBlue",
family = 'Courier'))
