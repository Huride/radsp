x <- 0
while(x < 10){
paste("x is : ", x)
x <- x + 1
}
while(x < 10){
print('hello')
x <- x + 1
}
while(x < 10){
print('hello')
x <- x + 1
}
while(x < 10){
print('hello')
x <- x + 1
}
x <- 0
while(x < 10){
print('hello')
x <- x + 1
}
x <- 0
x <- 0
while(x < 10){
print(paste('x is : ', x))
x <- x + 1
}
x <- 0
while(x < 10){
paste('x is : ', x)
x <- x + 1
}
x <- 0
while(x < 10){
print(paste('x is : ', x))
x <- x + 1
}
x <- 0
while(x < 10){
print(paste('x is : ', x))
x <- x + 1
}
x <- 0
while(x < 10){
print(paste('x is : ', x))
x <- x + 1
}
x <- 0
while(x < 10){
print(paste('x is : ', x))
}
while(x < 10){
if(x == 3){
print("Bye")
break
}
print(paste('x is : ', x))
x <- x + 1
}
vec <- 1:5
vec
for(data in vec){
print(data + 10)
}
mat <- matrix(1:25, nrow = 5)
mat
for( num in mat){
print(num + 10)
}
for( i in 2:9 ){
for ( j in 1:9 ){
print(paste(i, 'X', j , '=', i*j))
}
}
readline(prompt = "단을 입력하세요. : ")
step <- readline(prompt = "단을 입력하세요. : ")
step * 1
step <- as.numeric(step)
for(i in 1:9){
print( paste(step, "X", i, "=", step*i)  )
}
for(i in 1:9){
print('hello')
print( paste(step, "X", i, "=", step*i)  )
}
for(i in 1:9){
print('hello') print( paste(step, "X", i, "=", step*i)  )
}
for(i in 1:9){
print( paste(step, "X", i, "=", step*i)  )
}
step <- readline(prompt = "단을 입력하세요. : ")
step <- as.numeric(step)
for(i in 1:9){
print( paste(step, "X", i, "=", step*i)  )
}
setwd("~/GitHub/radsp/week07")
dataset <- read.csv('adult_sal.csv')
dataset$X <- NULL
str(dataset)
levels(as.factor(dataset$type_employer))
#고용 안된 사람들만 묶는다.
un.emp <- function(job){
if(job == "Never-worked" | job == "Without-pay"){
return('Unemployed')
}else{
return(job)
}
}
dataset$type_employer <- sapply(dataset$type_employer, un.emp)
levels(as.factor(dataset$type_employer))
group.emp <- function(job){
if(job == "Federal-gov" | job=="Local-gov" | job=="State-gov"){
return('gov')
}else if(job == "Self-emp-inc" | job == "Self-emp-not-inc"){
return('self-emp')
}else{
return(job)
}
}
dataset$type_employer <- sapply(dataset$type_employer, group.emp)
table(dataset$type_employer)
table(dataset$marital)
group.marital <- function(mar){
if(mar == 'Separated' | mar=='Divorced' | mar=='Widowed'){
return('Not-Married')
}else if(mar == 'Never-married'){
return('Never-married')
}else{
return('Married')
}
}
dataset$marital <- sapply(dataset$marital, group.marital)
Asia <- c('China','Hong','India','Iran','Cambodia','Japan', 'Laos' ,
'Philippines' ,'Vietnam' ,'Taiwan', 'Thailand')
North.America <- c('Canada','United-States','Puerto-Rico' )
Europe <- c('England' ,'France', 'Germany' ,'Greece','Holand-Netherlands','Hungary',
'Ireland','Italy','Poland','Portugal','Scotland','Yugoslavia')
Latin.and.South.America <- c('Columbia','Cuba','Dominican-Republic','Ecuador',
'El-Salvador','Guatemala','Haiti','Honduras',
'Mexico','Nicaragua','Outlying-US(Guam-USVI-etc)','Peru',
'Jamaica','Trinadad&Tobago')
Other <- c('South')
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
dataset$country <- sapply(dataset$country, group.country)
View(dataset)
group.country <- function(country){
if(conutry %in% Asia){
return('Asia')
}else if(country %in% North.America){
return('North.America')
}else if(country %in% Europe){
return('Europe')
}else if(country %in% Latin.and.South.America){
return('Latin.and.South.America')
}else{
return('Other')
}
}
dataset$country <- sapply(dataset$country, group.country)
View(dataset)
Asia
group.country <- function(country){
if(conutry %in% Asia){
return('Asia')
}else if(country %in% North.America){
return('North.America')
}else if(country %in% Europe){
return('Europe')
}else if(country %in% Latin.and.South.America){
return('Latin.and.South.America')
}else{
return('Other')
}
}
dataset$country <- sapply(dataset$country, group.country)
sapply(dataset$country, group.country)
group.country <- function(country){
if(country %in% Asia){
return('Asia')
}else if(country %in% North.America){
return('North.America')
}else if(country %in% Europe){
return('Europe')
}else if(country %in% Latin.and.South.America){
return('Latin.and.South.America')
}else{
return('Other')
}
}
dataset$country <- sapply(dataset$country, group.country)
View(dataset)
dataset$type_employer <- as.factor(dataset$type_employer)
dataset$marital <- as.factor(dataset$marital)
dataset$country <- as.factor(dataset$country)
View(dataset)
dataset[ dataset == '?', ]
dataset[ dataset == '?' ]
dataset[ dataset == '?' ] <- NA
table(dataset$type_employer)
table(dataset$occupation)
str(dataset)
# ? 를 NA 로 바꿨지만, 아직 팩터에는 ? 가 남아있기 때문에,
# 팩터로 다시 변환시켜서 처리해줘야 한다.
dataset$type_employer <- as.factor(dataset$type_employer)
dataset$marital <- as.factor(dataset$marital)
dataset$country <- as.factor(dataset$country)
str(dataset)
table(dataset)
table(dataset$type_employer)
# ? 를 NA 로 바꿨지만, 아직 팩터에는 ? 가 남아있기 때문에,
# 팩터로 다시 변환시켜서 처리해줘야 한다.
dataset$type_employer <- sapply(dataset$type_employer, factor)
dataset$marital <- sapply(dataset$marital, factor)
dataset$country <- sapply(dataset$country, factor)
table(dataset$type_employer)
str(dataset)
sum(is.na(dataset))
colSums(is.na(dataset))
dataset <- na.omit(dataset)
library(caTools)
set.seed(123)
split <- sample.split(dataset$income, SplitRatio = 0.7)
training_set <- subset(dataset, split == T)
test_set <- subset(dataset, split == F)
classifier <- glm(income ~ . ,
family = binomial,
data = training_set)
levels.df <- levels(as.factor(dataset$income))
levels.df
dataset$income <- factor(dataset$income,
levels = levels.df,
labels = c(0,1))
View(dataset)
dataset$income <- factor(dataset$income,
levels = levels.df,
labels = c(0,1))
View(dataset)
dataset <- read.csv('adult_sal.csv')
dataset$X <- NULL
str(dataset)
levels(as.factor(dataset$type_employer))
#고용 안된 사람들만 묶는다.
un.emp <- function(job){
if(job == "Never-worked" | job == "Without-pay"){
return('Unemployed')
}else{
return(job)
}
}
dataset$type_employer <- sapply(dataset$type_employer, un.emp)
levels(as.factor(dataset$type_employer))
group.emp <- function(job){
if(job == "Federal-gov" | job=="Local-gov" | job=="State-gov"){
return('gov')
}else if(job == "Self-emp-inc" | job == "Self-emp-not-inc"){
return('self-emp')
}else{
return(job)
}
}
dataset$type_employer <- sapply(dataset$type_employer, group.emp)
table(dataset$type_employer)
table(dataset$marital)
group.marital <- function(mar){
if(mar == 'Separated' | mar=='Divorced' | mar=='Widowed'){
return('Not-Married')
}else if(mar == 'Never-married'){
return('Never-married')
}else{
return('Married')
}
}
dataset$marital <- sapply(dataset$marital, group.marital)
group.country <- function(country){
if(country %in% Asia){
return('Asia')
}else if(country %in% North.America){
return('North.America')
}else if(country %in% Europe){
return('Europe')
}else if(country %in% Latin.and.South.America){
return('Latin.and.South.America')
}else{
return('Other')
}
}
dataset$country <- sapply(dataset$country, group.country)
dataset$type_employer <- as.factor(dataset$type_employer)
dataset$marital <- as.factor(dataset$marital)
dataset$country <- as.factor(dataset$country)
dataset[ dataset == '?' ] <- NA
table(dataset$type_employer)
str(dataset)
# ? 를 NA 로 바꿨지만, 아직 팩터에는 ? 가 남아있기 때문에,
# 팩터로 다시 변환시켜서 처리해줘야 한다.
dataset$type_employer <- sapply(dataset$type_employer, factor)
dataset$marital <- sapply(dataset$marital, factor)
dataset$country <- sapply(dataset$country, factor)
table(dataset$type_employer)
str(dataset)
colSums(is.na(dataset))
dataset <- na.omit(dataset)
library(caTools)
set.seed(123)
split <- sample.split(dataset$income, SplitRatio = 0.7)
training_set <- subset(dataset, split == T)
test_set <- subset(dataset, split == F)
classifier <- glm(income ~ . ,
family = binomial,
data = training_set)
levels.df <- levels(as.factor(dataset$income))
levels.df
dataset$income <- factor(dataset$income,
levels = levels.df,
labels = c(0,1))
dataset <- read.csv('adult_sal.csv')
dataset$X <- NULL
str(dataset)
levels(as.factor(dataset$type_employer))
#고용 안된 사람들만 묶는다.
un.emp <- function(job){
if(job == "Never-worked" | job == "Without-pay"){
return('Unemployed')
}else{
return(job)
}
}
dataset$type_employer <- sapply(dataset$type_employer, un.emp)
levels(as.factor(dataset$type_employer))
group.emp <- function(job){
if(job == "Federal-gov" | job=="Local-gov" | job=="State-gov"){
return('gov')
}else if(job == "Self-emp-inc" | job == "Self-emp-not-inc"){
return('self-emp')
}else{
return(job)
}
}
dataset$type_employer <- sapply(dataset$type_employer, group.emp)
table(dataset$type_employer)
table(dataset$marital)
group.marital <- function(mar){
if(mar == 'Separated' | mar=='Divorced' | mar=='Widowed'){
return('Not-Married')
}else if(mar == 'Never-married'){
return('Never-married')
}else{
return('Married')
}
}
dataset$marital <- sapply(dataset$marital, group.marital)
group.country <- function(country){
if(country %in% Asia){
return('Asia')
}else if(country %in% North.America){
return('North.America')
}else if(country %in% Europe){
return('Europe')
}else if(country %in% Latin.and.South.America){
return('Latin.and.South.America')
}else{
return('Other')
}
}
dataset$country <- sapply(dataset$country, group.country)
dataset$type_employer <- as.factor(dataset$type_employer)
dataset$marital <- as.factor(dataset$marital)
dataset$country <- as.factor(dataset$country)
dataset[ dataset == '?' ] <- NA
table(dataset$type_employer)
str(dataset)
# ? 를 NA 로 바꿨지만, 아직 팩터에는 ? 가 남아있기 때문에,
# 팩터로 다시 변환시켜서 처리해줘야 한다.
dataset$type_employer <- sapply(dataset$type_employer, factor)
dataset$marital <- sapply(dataset$marital, factor)
dataset$country <- sapply(dataset$country, factor)
table(dataset$type_employer)
str(dataset)
colSums(is.na(dataset))
dataset <- na.omit(dataset)
levels.df <- levels(as.factor(dataset$income))
levels.df
dataset$income <- factor(dataset$income,
levels = levels.df,
labels = c(0,1))
library(caTools)
set.seed(123)
split <- sample.split(dataset$income, SplitRatio = 0.7)
training_set <- subset(dataset, split == T)
test_set <- subset(dataset, split == F)
classifier <- glm(income ~ . ,
family = binomial,
data = training_set)
summary(classifier)
